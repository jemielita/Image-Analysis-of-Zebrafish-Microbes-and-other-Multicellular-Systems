%saveCroppedBatch: for a given directory that has been cropped using
%multipleRegionCrop.m save the cropped region to a new directory, or
%overwrite the existing directory.
%
%USAGE: saveCroppedBatch(param, cropDir, fileType, cropType)
%    param: parameter file for a given directory of images. Generated by
%
%    multipleRegionCrop. Using multipleRegionCrop.m the user must have
%    cropped down the images to the desired size.
%
%    cropDir: the directory to save the cropped region to. This directory
%    can be the directory that the images are taken from. If it is this
%    program will overwrite the images in that directory
%
%    fileType: 'tiff' or 'png'. Save the result in either format
%
%    cropType: 'all', 'xy', or 'z'. Crop the images either in the 'xy' plane,
%    'z' plane or in both ('all'). Only 'xy' currently supported.
%
%AUTHOR: Matthew Jemielita

function saveCroppedBatch(param, cropDir, fileType,cropType)

%Get some needed variables.
totalNumRegions = length(unique([param.expData.Scan.region]));
totalNumScans = param.expData.totalNumberScans;
totalNumColors = size(param.color,2);


%Create a new directory structure if necessary
if(~strcmp(cropDir, param.directoryName))
    for nS=1:totalNumScans
        for nR = 1:totalNumRegions
            for nC = 1:totalNumColors
                dirName = [cropDir filesep 'Scans' filesep 'scan_', num2str(nS), filesep ...
                    'region_', num2str(nR), filesep param.color{nC}];
                mkdir(dirName);
            end
        end
    end
end

%save the meta-data necessary to register the images after they've
%been cropped.
for nR = 1:totalNumRegions
    index = find([param.expData.Scan.region]==nR);
    for nIndex=1:length(index)%Do you really have to use this FOR loop?
        %Save the new x-y location of the images
        param.expData.Scan(index(nIndex)).xBegin = 10*param.micronPerPixel*(param.regionExtent.XY(nR,5)-1)+...
            param.expData.Scan(index(nIndex)).xBegin;
        
        param.expData.Scan(index(nIndex)).yBegin = 10*param.micronPerPixel*(param.regionExtent.XY(nR,6)-1)+...
            param.expData.Scan(index(nIndex)).yBegin;
        %Save the size of the new cropped image
        param.expData.Scan(index(nIndex)).imSize = [param.regionExtent.XY(nR,3), param.regionExtent.XY(nR,4)];
        
    end
    
end

parameters = param.expData;
timeData = param.expData.timeData;

%Make a backup of the original experimentalData.mat files if we're
%overwriting the directory
if(strcmp(cropDir, param.directoryName))
   copyfile( [cropDir, filesep, 'ExperimentData.mat'],...
       [cropDir, filesep, 'ExperimentData.mat_backup']);
end

%Note: currently not updating the experimentData.txt file!!!!
save([cropDir filesep 'ExperimentData.mat'], 'parameters', 'timeData');

%Go through the directory structure and load the appropriate images,
%crop them, and then save the result as either a TIFF or PNG.

for nS=1:totalNumScans
    mess = ['Cropping scan ', num2str(nS)];
    fprintf(2, mess);
    for nR = 1:totalNumRegions
        for nC = 1:totalNumColors
            outputDirName = [cropDir filesep 'Scans' filesep 'scan_', num2str(nS), filesep ...
                'region_', num2str(nR), filesep param.color{nC}];
            inputDirName =  [param.directoryName filesep 'Scans' filesep 'scan_', num2str(nS), filesep ...
                'region_', num2str(nR), filesep param.color{nC}];
            index = find([param.expData.Scan.region]==nR);
            totalNumIm = param.expData.Scan(index(1)).nImgsPerScan;%Assuming there are equal number of images in both channels...
            %a reasonable assumption.
            
            for nI = 1:totalNumIm
                fN = [inputDirName, filesep, 'pco', num2str(nI-1), '.tif'];
                %Same code as in registerSingleImage.m
                xOutI = param.regionExtent.XY(nR,1);
                xOutF = param.regionExtent.XY(nR,3)+xOutI-1;
                
                yOutI = param.regionExtent.XY(nR,2);
                yOutF = param.regionExtent.XY(nR,4)+yOutI -1;
                xInI = param.regionExtent.XY(nR,5);
                xInF = xOutF - xOutI +xInI;
                
                yInI = param.regionExtent.XY(nR,6);
                yInF = yOutF - yOutI +yInI;
                
                %Loading in this image
                imI = imread(fN,...
                    'PixelRegion', {[xInI xInF], [yInI yInF]});
                %Saving this image to the new location, in either a
                %tiff or png format.
                switch fileType
                    case 'tiff'
                        fNout = [outputDirName, filesep, 'pco', num2str(nI-1), '.tif'];
                        imwrite(imI, fNout);
                    case 'png'
                        fNout = [outputDirName, filesep, 'pco', num2str(nI-1), '.png'];
                        imwrite(imI, fNout);
                        if(strcmp(cropDir, param.directoryName))
                            delete(fN);%If we're overwriting the origina file, then delete the .tiff file and replace it with a .png
                        end
                end
                fprintf(2, '.');
            end
            
        end
    end
    
    fprintf(2, '\n');
end

end